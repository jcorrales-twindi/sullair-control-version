{
  "entityType" : "DASHBOARD",
  "entity" : {
    "assignedCustomers" : null,
    "configuration" : {
      "description" : "",
      "widgets" : {
        "82c8a94a-6262-2f67-1ccb-9ab12bc14495" : {
          "isSystemType" : true,
          "bundleAlias" : "cards",
          "typeAlias" : "html_value_card",
          "type" : "latest",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "1eee675a-8320-8c3e-bbba-21fe119667d5",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "title",
                "type" : "entityField",
                "label" : "Title",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.6255497294521524
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1721675557669,
                  "endTimeMs" : 1721761957669
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#008657",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<div class='card'>${Title}</div>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   box-sizing: border-box;\n   font-size: 160%;\n   color: white;\n   \n   padding: 10px;\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n   justify-content: space-around;\n   box-sizing: border-box;\n}\n"
            },
            "title" : "New HTML Value Card",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : {
              "borderRadius" : ".75rem"
            },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "enableDataExport" : false,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "82c8a94a-6262-2f67-1ccb-9ab12bc14495"
        },
        "515b8bb4-cf42-1bb2-1e94-3fe6469e6362" : {
          "isSystemType" : true,
          "bundleAlias" : "cards",
          "typeAlias" : "html_card",
          "type" : "static",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "cardHtml" : "<div class='nav-links'>\n    <!--<button id='view_tcentral' mat-icon-button color=\"primary\" matTooltip=\"T.Central\" >\n        <img src=\"https://qr.twindimension.com/icons/svg/pricing.svg\"/>\n        <p>T.Central</p>\n    </button>-->\n    \n    <button id='view_map' mat-icon-button color=\"primary\" matTooltip=\"Monitoreo\" >\n        <img src=\"https://qr.twindimension.com/icons/svg/map.svg\"/>\n        <p>Monitoreo de flotas</p>\n    </button>\n    \n    <button id='view_status' mat-icon-button color=\"primary\" matTooltip=\"Estado de dispositivos\" >\n        <img src=\"https://qr.twindimension.com/icons/svg/monitoring.svg\"/>\n        <p>Estado de dispositivos</p>\n    </button>\n    \n    <button id='view_report' mat-icon-button color=\"primary\" matTooltip=\"Reportes\" >\n        <img src=\"https://qr.twindimension.com/icons/svg/report.svg\"/>\n        <p>Reporte de uso</p>\n    </button>\n</div>",
              "cardCss" : ".nav-links {\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    padding: 10px;\n}\n\n.nav-links button { \n    border: none; \n    background: transparent;\n    width: 160px;\n    height: 160px;\n    border-radius: 9px;\n    padding-top: 1rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n}\n\n.nav-links button:hover {\n    background: rgba(128,128,128, 0.2);\n}\n\n.nav-links button p {\n    font-size: 0.8rem;\n    margin: 0;\n    /*background: orange;*/\n}\n\n.nav-links button img {\n    user-select: none;\n    background-repeat: no-repeat;\n    display: inline-block;\n    fill: currentColor;\n    height: 90px;\n    width: 90px;\n    overflow: hidden;\n    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.5));\n}"
            },
            "title" : "Navigation Links",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "enableDataExport" : true,
            "widgetStyle" : {
              "borderRadius" : ".75rem"
            },
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "showLegend" : false,
            "actions" : {
              "elementClick" : [ {
                "name" : "view_status",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboard",
                "targetDashboardStateId" : null,
                "setEntityId" : false,
                "stateEntityParamName" : null,
                "openNewBrowserTab" : false,
                "targetDashboardId" : "83209e70-237a-11ef-832d-975fea959a44",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "1257f267-dbc5-b692-2337-d7ca4a47e78f"
              }, {
                "name" : "view_map",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboard",
                "targetDashboardStateId" : null,
                "setEntityId" : false,
                "stateEntityParamName" : null,
                "openNewBrowserTab" : false,
                "targetDashboardId" : "e89800b0-176b-11ef-8a81-796b974d7f03",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "28ea7e9a-b4f8-946e-7993-b9d79ecca7c0"
              }, {
                "name" : "view_report",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboard",
                "targetDashboardStateId" : "default",
                "setEntityId" : false,
                "stateEntityParamName" : null,
                "openNewBrowserTab" : false,
                "targetDashboardId" : "d8633900-5003-11ef-b99e-bd171b219e16",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "4c13e2e7-8336-4296-c3ca-e3e8d468233a"
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "515b8bb4-cf42-1bb2-1e94-3fe6469e6362"
        },
        "6d9066b3-0658-2b36-61f7-799aab109332" : {
          "isSystemType" : true,
          "bundleAlias" : "home_page_widgets",
          "typeAlias" : "usage_info",
          "type" : "static",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : { },
            "title" : "Usage info",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : {
              "borderRadius" : ".75rem"
            },
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "showLegend" : false,
            "datasources" : [ ],
            "enableDataExport" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "6d9066b3-0658-2b36-61f7-799aab109332"
        },
        "1ca6e4ae-b106-045b-686f-07394ba03065" : {
          "isSystemType" : true,
          "bundleAlias" : "home_page_widgets",
          "typeAlias" : "quick_links",
          "type" : "static",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "columns" : 2
            },
            "title" : "New Quick links",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : {
              "borderRadius" : ".75rem"
            },
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "showLegend" : false,
            "datasources" : [ ],
            "enableDataExport" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "1ca6e4ae-b106-045b-686f-07394ba03065"
        },
        "2c4b245b-0b6a-77a0-51e9-aa7885ace5a8" : {
          "isSystemType" : true,
          "bundleAlias" : "cards",
          "typeAlias" : "markdown_card",
          "type" : "latest",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 5,
          "sizeY" : 3.5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "afab1b83-441c-8568-e91a-c39908270516",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "DataOrigin",
                "type" : "attribute",
                "label" : "DataOrigin",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.2559483389443984
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            }, {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "f8297dd3-406d-fc76-0bd6-caf810b0e04f",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "DataOrigin",
                "type" : "attribute",
                "label" : "DataOrigin",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.3635586728324115,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "withRelation",
                "type" : "attribute",
                "label" : "withRelation",
                "color" : "#f44336",
                "settings" : { },
                "_hash" : 0.6938798868430843,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : true,
                "postFuncBody" : "return true;"
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            }, {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "1eee675a-8320-8c3e-bbba-21fe119667d5",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "title",
                "type" : "entityField",
                "label" : "Title",
                "color" : "#ffc107",
                "settings" : { },
                "_hash" : 0.1769665350438181
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1721744502800,
                  "endTimeMs" : 1721830902800
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "useMarkdownTextFunction" : true,
              "markdownTextFunction" : "let $injector = ctx.$scope.$injector;\nlet attributeService = $injector.get(\n  ctx.servicesMap.get('attributeService')\n);\n\nconst devicesWithAssets  = data.filter((device)=>device.withRelation).map(device => device.entityName);\nconst filteredDevices = data.filter(device => !(devicesWithAssets.includes(device.entityName) || device.entityType==='TENANT'));\nconst tenantData = data.find((datasource)=>datasource.entityType==='TENANT')\nif(tenantData){\n    try {\n        /* code */\n        attributeService.saveEntityAttributes(\n      {entityType:tenantData.entityType, id:tenantData.entityId},\n      'SERVER_SCOPE',\n      [{key: 'devicesWithAssets', value: devicesWithAssets.join(',')} ]\n    ).subscribe(\n            function () {\n                \n            }\n        );; \n    } catch (e) {\n        console.log(\"ErrorSave=>\",e)\n    }\n   \n}\nreturn `\n<button mat-flat-button id=\"table_devices\" style=\"width:100%; height:100% ;\" >\n    <div class=\"card\">\n        <div class=\"count\">${filteredDevices.length}</div>\n        <div class=\"title\">Dispositivos sin flota asociada</div>\n    </div>\n</button>`\n    \n",
              "applyDefaultMarkdownStyle" : true,
              "markdownCss" : ".card{\n    display:flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap:1rem;\n}\n.title {\n    color: #888;\n    font-size: 1rem;\n}\n.count {\n    font-size: 2.5rem;\n}\n"
            },
            "title" : "Dispositivos sin flota",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : {
              "borderRadius" : ".75rem"
            },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "useDashboardTimewindow" : true,
            "enableDataExport" : false,
            "widgetCss" : "",
            "pageSize" : 2500,
            "noDataDisplayMessage" : "",
            "actions" : {
              "elementClick" : [ {
                "name" : "table_devices",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "table_of_devices",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openRightLayout" : false,
                "dialogTitle" : "Dispositivos",
                "dialogHideDashboardToolbar" : true,
                "dialogWidth" : null,
                "dialogHeight" : null,
                "openInSeparateDialog" : true,
                "openInPopover" : false,
                "id" : "8ed2c68c-8855-8b36-2439-2fb668402ae5"
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "2c4b245b-0b6a-77a0-51e9-aa7885ace5a8"
        },
        "43a5e0fe-2a2f-775e-694e-3e518c4e57bf" : {
          "isSystemType" : true,
          "bundleAlias" : "cards",
          "typeAlias" : "entities_table",
          "type" : "latest",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1721823701317,
                  "endTimeMs" : 1721910101317
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "entitiesTitle" : "Dispositivos sin flota asociada",
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : true,
              "entityNameColumnTitle" : "Serial",
              "displayEntityLabel" : false,
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 30,
              "defaultSortOrder" : "entityName",
              "useRowStyleFunction" : false
            },
            "title" : "New Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "afab1b83-441c-8568-e91a-c39908270516",
              "filterId" : "c70a0c7f-474c-ca72-e729-dbcb4e204e96",
              "dataKeys" : [ {
                "name" : "DataOrigin",
                "type" : "attribute",
                "label" : "DataOrigin",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.22033194028147385
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "displayTimewindow" : true,
            "showTitleIcon" : false,
            "titleTooltip" : "",
            "enableDataExport" : true,
            "widgetStyle" : {
              "borderRadius" : ".75rem"
            },
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "actions" : {
              "actionCellButton" : [ {
                "name" : "Agregar Relación",
                "icon" : "device_hub",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<!--=======================================================================-->\r\n<!--=====  There are two example templates: for edit and add entity   =====-->\r\n<!--=======================================================================-->\r\n<!--========================  Edit entity example  ========================-->\r\n<!--=======================================================================-->\r\n<!-- -->\r\n<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\r\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\r\n    <mat-toolbar fxLayout=\"row\" color=\"basic\">\r\n        <h2>Editar {{entityType.toLowerCase()}} {{entityName}}</h2>\r\n        <span fxFlex></span>\r\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\r\n            <mat-icon class=\"material-icons\">close</mat-icon>\r\n        </button>\r\n    </mat-toolbar>\r\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\r\n    </mat-progress-bar>\r\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\r\n    <div mat-dialog-content fxLayout=\"column\">\r\n        <div class=\"relations-list\">\r\n            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57); min-width: 500px;\">Nuevas Relaciones</div>\r\n            <div class=\"body\" [fxShow]=\"relations().length\">\r\n                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"relations\" *ngFor=\"let relation of relations().controls; let i = index;\">\r\n                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px; \">\r\n                        <div fxFlex fxLayout=\"column\">\r\n                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\" *ngIf=\"false\">\r\n                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">\r\n                                    <mat-label>Dirección</mat-label>\r\n                                    <mat-select formControlName=\"direction\" name=\"direction\">\r\n                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">\r\n                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}\r\n                                        </mat-option>\r\n                                    </mat-select>\r\n                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">\r\n                                        Relation direction is required.\r\n                                    </mat-error>\r\n                                </mat-form-field>\r\n                                <tb-relation-type-autocomplete\r\n                                        fxFlex class=\"mat-block\"\r\n                                        formControlName=\"relationType\"\r\n                                        [required]=\"true\">\r\n                                </tb-relation-type-autocomplete>\r\n                            </div>\r\n                            <div fxLayout=\"row\" fxLayout.xs=\"column\">\r\n                                <tb-entity-select\r\n                                        fxFlex class=\"mat-block\"\r\n                                        [allowedEntityTypes]=\"'ASSET'\"\r\n                                        [required]=\"true\"\r\n                                        [useAliasEntityTypes]=\"true\"\r\n                                        formControlName=\"relatedEntity\">\r\n                                </tb-entity-select>\r\n                            </div>\r\n                        </div>\r\n                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n                            <button mat-icon-button color=\"primary\"\r\n                                    aria-label=\"Remove\"\r\n                                    type=\"button\"\r\n                                    (click)=\"removeRelation(i)\"\r\n                                    matTooltip=\"Remover relación\"\r\n                                    matTooltipPosition=\"above\">\r\n                                <mat-icon>close</mat-icon>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button mat-raised-button color=\"primary\"\r\n                        type=\"button\"\r\n                        (click)=\"addRelation()\"\r\n                        matTooltip=\"Agregar realción\"\r\n                        matTooltipPosition=\"above\">\r\n                    Add\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n        <button mat-button color=\"primary\"\r\n                type=\"button\"\r\n                [disabled]=\"(isLoading$ | async)\"\r\n                (click)=\"cancel()\" cdkFocusInitial>\r\n            Cancelar\r\n        </button>\r\n        <button mat-button mat-raised-button color=\"primary\"\r\n                type=\"submit\"\r\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\r\n            Guardar\r\n        </button>\r\n    </div>\r\n</form>\r\n<!---->\r\n<!--========================================================================-->\r\n<!--=========================  Add entity example  =========================-->\r\n<!--========================================================================-->\r\n<!---->\r\n<!--<form #addEntityForm=\"ngForm\" [formGroup]=\"addEntityFormGroup\"-->\r\n<!--      (ngSubmit)=\"save()\" class=\"add-entity-form\">-->\r\n<!--    <mat-toolbar fxLayout=\"row\" color=\"primary\">-->\r\n<!--        <h2>Add entity</h2>-->\r\n<!--        <span fxFlex></span>-->\r\n<!--        <button mat-icon-button (click)=\"cancel()\" type=\"button\">-->\r\n<!--            <mat-icon class=\"material-icons\">close</mat-icon>-->\r\n<!--        </button>-->\r\n<!--    </mat-toolbar>-->\r\n<!--    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">-->\r\n<!--    </mat-progress-bar>-->\r\n<!--    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>-->\r\n<!--    <div mat-dialog-content fxLayout=\"column\">-->\r\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\r\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                <mat-label>Entity Name</mat-label>-->\r\n<!--                <input matInput formControlName=\"entityName\" required>-->\r\n<!--                <mat-error *ngIf=\"addEntityFormGroup.get('entityName').hasError('required')\">-->\r\n<!--                    Entity name is required.-->\r\n<!--                </mat-error>-->\r\n<!--            </mat-form-field>-->\r\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                <mat-label>Entity Label</mat-label>-->\r\n<!--                <input matInput formControlName=\"entityLabel\" >-->\r\n<!--            </mat-form-field>-->\r\n<!--        </div>-->\r\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\r\n<!--            <tb-entity-type-select-->\r\n<!--                    class=\"mat-block\"-->\r\n<!--                    formControlName=\"entityType\"-->\r\n<!--                    [showLabel]=\"true\"-->\r\n<!--                    [allowedEntityTypes]=\"allowedEntityTypes\"-->\r\n<!--            ></tb-entity-type-select>-->\r\n<!--            <tb-entity-subtype-autocomplete-->\r\n<!--                    fxFlex *ngIf=\"addEntityFormGroup.get('entityType').value == 'ASSET'\"-->\r\n<!--                    class=\"mat-block\"-->\r\n<!--                    formControlName=\"type\"-->\r\n<!--                    [required]=\"true\"-->\r\n<!--                    [entityType]=\"'ASSET'\"-->\r\n<!--            ></tb-entity-subtype-autocomplete>-->\r\n<!--            <tb-entity-subtype-autocomplete-->\r\n<!--                    fxFlex *ngIf=\"addEntityFormGroup.get('entityType').value != 'ASSET'\"-->\r\n<!--                    class=\"mat-block\"-->\r\n<!--                    formControlName=\"type\"-->\r\n<!--                    [required]=\"true\"-->\r\n<!--                    [entityType]=\"'DEVICE'\"-->\r\n<!--            ></tb-entity-subtype-autocomplete>-->\r\n<!--        </div>-->\r\n<!--        <div formGroupName=\"attributes\" fxLayout=\"column\">-->\r\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\r\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                    <mat-label>Latitude</mat-label>-->\r\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">-->\r\n<!--                </mat-form-field>-->\r\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                    <mat-label>Longitude</mat-label>-->\r\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">-->\r\n<!--                </mat-form-field>-->\r\n<!--            </div>-->\r\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\r\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                    <mat-label>Address</mat-label>-->\r\n<!--                    <input matInput formControlName=\"address\">-->\r\n<!--                </mat-form-field>-->\r\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                    <mat-label>Owner</mat-label>-->\r\n<!--                    <input matInput formControlName=\"owner\">-->\r\n<!--                </mat-form-field>-->\r\n<!--            </div>-->\r\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\r\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\r\n<!--                    <mat-label>Integer Value</mat-label>-->\r\n<!--                    <input type=\"number\" step=\"1\" matInput formControlName=\"number\">-->\r\n<!--                    <mat-error *ngIf=\"addEntityFormGroup.get('attributes.number').hasError('pattern')\">-->\r\n<!--                        Invalid integer value.-->\r\n<!--                    </mat-error>-->\r\n<!--                </mat-form-field>-->\r\n<!--                <div class=\"boolean-value-input\" fxLayout=\"column\" fxLayoutAlign=\"center start\" fxFlex>-->\r\n<!--                    <label class=\"checkbox-label\">Boolean Value</label>-->\r\n<!--                    <mat-checkbox formControlName=\"booleanValue\" style=\"margin-bottom: 40px;\">-->\r\n<!--                        {{ (addEntityFormGroup.get('attributes.booleanValue').value ? \"value.true\" : \"value.false\") | translate }}-->\r\n<!--                    </mat-checkbox>-->\r\n<!--                </div>-->\r\n<!--            </div>-->\r\n<!--        </div>-->\r\n<!--        <div class=\"relations-list\">-->\r\n<!--            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\r\n<!--            <div class=\"body\" [fxShow]=\"relations().length\">-->\r\n<!--                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"relations\" *ngFor=\"let relation of relations().controls; let i = index;\">-->\r\n<!--                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">-->\r\n<!--                        <div fxFlex fxLayout=\"column\">-->\r\n<!--                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\r\n<!--                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">-->\r\n<!--                                    <mat-label>Direction</mat-label>-->\r\n<!--                                    <mat-select formControlName=\"direction\" name=\"direction\">-->\r\n<!--                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">-->\r\n<!--                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}-->\r\n<!--                                        </mat-option>-->\r\n<!--                                    </mat-select>-->\r\n<!--                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">-->\r\n<!--                                        Relation direction is required.-->\r\n<!--                                    </mat-error>-->\r\n<!--                                </mat-form-field>-->\r\n<!--                                <tb-relation-type-autocomplete-->\r\n<!--                                        fxFlex class=\"mat-block\"-->\r\n<!--                                        formControlName=\"relationType\"-->\r\n<!--                                        [required]=\"true\">-->\r\n<!--                                </tb-relation-type-autocomplete>-->\r\n<!--                            </div>-->\r\n<!--                            <div fxLayout=\"row\" fxLayout.xs=\"column\">-->\r\n<!--                                <tb-entity-select-->\r\n<!--                                        fxFlex class=\"mat-block\"-->\r\n<!--                                        [required]=\"true\"-->\r\n<!--                                        formControlName=\"relatedEntity\">-->\r\n<!--                                </tb-entity-select>-->\r\n<!--                            </div>-->\r\n<!--                        </div>-->\r\n<!--                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">-->\r\n<!--                            <button mat-icon-button color=\"primary\"-->\r\n<!--                                    aria-label=\"Remove\"-->\r\n<!--                                    type=\"button\"-->\r\n<!--                                    (click)=\"removeRelation(i)\"-->\r\n<!--                                    matTooltip=\"Remove relation\"-->\r\n<!--                                    matTooltipPosition=\"above\">-->\r\n<!--                                <mat-icon>close</mat-icon>-->\r\n<!--                            </button>-->\r\n<!--                        </div>-->\r\n<!--                    </div>-->\r\n<!--                </div>-->\r\n<!--            </div>-->\r\n<!--            <div>-->\r\n<!--                <button mat-raised-button color=\"primary\"-->\r\n<!--                        type=\"button\"-->\r\n<!--                        (click)=\"addRelation()\"-->\r\n<!--                        matTooltip=\"Add Relation\"-->\r\n<!--                        matTooltipPosition=\"above\">-->\r\n<!--                    Add-->\r\n<!--                </button>-->\r\n<!--            </div>-->\r\n<!--        </div>-->\r\n<!--    </div>-->\r\n<!--    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">-->\r\n<!--        <button mat-button color=\"primary\"-->\r\n<!--                type=\"button\"-->\r\n<!--                [disabled]=\"(isLoading$ | async)\"-->\r\n<!--                (click)=\"cancel()\" cdkFocusInitial>-->\r\n<!--            Cancel-->\r\n<!--        </button>-->\r\n<!--        <button mat-button mat-raised-button color=\"primary\"-->\r\n<!--                type=\"submit\"-->\r\n<!--                [disabled]=\"(isLoading$ | async) || addEntityForm.invalid || !addEntityForm.dirty\">-->\r\n<!--            Create-->\r\n<!--        </button>-->\r\n<!--    </div>-->\r\n<!--</form>-->",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "/*=======================================================================*/\r\n/*=====  There are three examples: for delete, edit and add entity  =====*/\r\n/*=======================================================================*/\r\n/*=======================  Delete entity example  =======================*/\r\n/*=======================================================================*/\r\n//\r\n// let $injector = widgetContext.$scope.$injector;\r\n// let dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\r\n// let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\r\n// let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\r\n\r\n// openDeleteEntityDialog();\r\n\r\n// function openDeleteEntityDialog() {\r\n//     let title = 'Delete ' + entityId.entityType.toLowerCase() + ' ' +\r\n//                 entityName;\r\n//     let content = 'Are you sure you want to delete the ' +\r\n//                  entityId.entityType.toLowerCase() + ' ' + entityName + '?';\r\n//     dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\r\n//         function(result) {\r\n//             if (result) {\r\n//                 deleteEntity();\r\n//             }\r\n//         }\r\n//     );\r\n// }\r\n// //\r\n// function deleteEntity() {\r\n//     deleteEntityObservable(entityId).subscribe(\r\n//         function success() {\r\n//             widgetContext.updateAliases();\r\n//         },\r\n//         function fail() {\r\n//             showErrorDialog();\r\n//         }\r\n//     );\r\n// }\r\n\r\n// function deleteEntityObservable(entityId) {\r\n//     if (entityId.entityType == \"ASSET\") {\r\n//         return assetService.deleteAsset(entityId.id);\r\n//     } else if (entityId.entityType == \"DEVICE\") {\r\n//         return deviceService.deleteDevice(entityId.id);\r\n//     }\r\n// }\r\n\r\n// function showErrorDialog() {\r\n//     let title = 'Error';\r\n//     let content = 'An error occurred while deleting the entity. Please try again.';\r\n//     dialogs.alert(title, content, 'CLOSE').subscribe(\r\n//         function(result) {}\r\n//     );\r\n// }\r\n//\r\n/*=======================================================================*/\r\n/*========================  Edit entity example  ========================*/\r\n/*=======================================================================*/\r\n//\r\nlet $injector = widgetContext.$scope.$injector;\r\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\r\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\r\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\r\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\r\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\r\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\r\n\r\nopenEditEntityDialog();\r\n\r\nfunction openEditEntityDialog() {\r\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\r\n}\r\n\r\nfunction EditEntityDialogController(instance) {\r\n    let vm = instance;\r\n\r\n    vm.entityName = entityName;\r\n    vm.entityType = entityId.entityType;\r\n    vm.entitySearchDirection = {\r\n        from: \"FROM\",\r\n        to: \"TO\"\r\n    };\r\n    vm.attributes = {};\r\n    vm.oldRelationsData = [];\r\n    vm.relationsToDelete = [];\r\n    vm.entity = {};\r\n\r\n    vm.editEntityFormGroup = vm.fb.group({\r\n        entityName: ['', [vm.validators.required]],\r\n        entityType: [null],\r\n        entityLabel: [null],\r\n        type: ['', [vm.validators.required]],\r\n        attributes: vm.fb.group({\r\n            latitude: [null],\r\n            longitude: [null],\r\n            address: [null],\r\n            owner: [null],\r\n            number: [null, [vm.validators.pattern(/^-?[0-9]+$/)]],\r\n            booleanValue: [false]\r\n        }),\r\n        oldRelations: vm.fb.array([]),\r\n        relations: vm.fb.array([])\r\n    });\r\n\r\n    getEntityInfo();\r\n\r\n    vm.cancel = function() {\r\n        vm.dialogRef.close(null);\r\n    };\r\n\r\n    vm.relations = function() {\r\n        return vm.editEntityFormGroup.get('relations');\r\n    };\r\n\r\n    vm.oldRelations = function() {\r\n        return vm.editEntityFormGroup.get('oldRelations');\r\n    };\r\n\r\n    vm.addRelation = function() {\r\n        vm.relations().push(vm.fb.group({\r\n            relatedEntity: [{value:{ entityType: 'ASSET',\r\n            entityId: null},}, [vm.validators.required]],\r\n            relationType: [{value: 'Contains', disabled: true}, [vm.validators.required]],\r\n            direction: [{value: 'TO', disabled: true}, [vm.validators.required]]\r\n        }));\r\n    };\r\n\r\n    function addOldRelation() {\r\n        vm.oldRelations().push(vm.fb.group({\r\n            relatedEntity: [{value: null, disabled: true}, [vm.validators.required]],\r\n            relationType: [{value: null, disabled: true}, [vm.validators.required]],\r\n            direction: [{value: null, disabled: true}, [vm.validators.required]]\r\n        }));\r\n    }\r\n\r\n    vm.removeRelation = function(index) {\r\n        vm.relations().removeAt(index);\r\n        vm.relations().markAsDirty();\r\n    };\r\n\r\n    vm.removeOldRelation = function(index, relation) {\r\n        vm.oldRelations().removeAt(index);\r\n        vm.relationsToDelete.push(relation);\r\n        vm.oldRelations().markAsDirty();\r\n    };\r\n\r\n    vm.save = function() {\r\n        vm.editEntityFormGroup.markAsPristine();\r\n        widgetContext.rxjs.forkJoin([\r\n            saveRelations(entityId),\r\n            saveEntity()\r\n        ]).subscribe(\r\n            function () {\r\n                widgetContext.updateAliases();\r\n                vm.dialogRef.close(null);\r\n            }\r\n        );\r\n    };\r\n\r\n    function getEntityAttributes(attributes) {\r\n        for (var i = 0; i < attributes.length; i++) {\r\n            vm.attributes[attributes[i].key] = attributes[i].value;\r\n        }\r\n    }\r\n\r\n    function getEntityRelations(relations) {\r\n        let relationsFrom = relations[0];\r\n        let relationsTo = relations[1];\r\n        for (let i=0; i < relationsFrom.length; i++) {\r\n            let relation = {\r\n                direction: 'FROM',\r\n                relationType: relationsFrom[i].type,\r\n                relatedEntity: relationsFrom[i].to\r\n            };\r\n            vm.oldRelationsData.push(relation);\r\n            addOldRelation();\r\n        }\r\n        for (let i=0; i < relationsTo.length; i++) {\r\n            let relation = {\r\n                direction: 'TO',\r\n                relationType: relationsTo[i].type,\r\n                relatedEntity: relationsTo[i].from\r\n            };\r\n            vm.oldRelationsData.push(relation);\r\n            addOldRelation();\r\n        }\r\n    }\r\n\r\n    function getEntityInfo() {\r\n        widgetContext.rxjs.forkJoin([\r\n            entityRelationService.findInfoByFrom(entityId),\r\n            entityRelationService.findInfoByTo(entityId),\r\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE'),\r\n            entityService.getEntity(entityId.entityType, entityId.id)\r\n        ]).subscribe(\r\n            function (data) {\r\n                getEntityRelations(data.slice(0,2));\r\n                getEntityAttributes(data[2]);\r\n                vm.entity = data[3];\r\n                vm.editEntityFormGroup.patchValue({\r\n                    entityName: vm.entity.name,\r\n                    entityType: vm.entityType,\r\n                    entityLabel: vm.entity.label,\r\n                    type: vm.entity.type,\r\n                    attributes: vm.attributes,\r\n                    oldRelations: vm.oldRelationsData\r\n                }, {emitEvent: false});\r\n            }\r\n        );\r\n    }\r\n\r\n    function saveEntity() {\r\n        const formValues = vm.editEntityFormGroup.value;\r\n        if (vm.entity.label !== formValues.entityLabel){\r\n            vm.entity.label = formValues.entityLabel;\r\n            if (formValues.entityType == 'ASSET') {\r\n                return assetService.saveAsset(vm.entity);\r\n            } else if (formValues.entityType == 'DEVICE') {\r\n                return deviceService.saveDevice(vm.entity);\r\n            }\r\n        }\r\n        return widgetContext.rxjs.of([]);\r\n    }\r\n\r\n    function saveAttributes(entityId) {\r\n        let attributes = vm.editEntityFormGroup.get('attributes').value;\r\n        let attributesArray = [];\r\n        for (let key in attributes) {\r\n            if (attributes[key] !== vm.attributes[key]) {\r\n                attributesArray.push({key: key, value: attributes[key]});\r\n            }\r\n        }\r\n        if (attributesArray.length > 0) {\r\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\r\n        }\r\n        return widgetContext.rxjs.of([]);\r\n    }\r\n\r\n    function saveRelations(entityId) {\r\n        let relations = vm.editEntityFormGroup.get('relations').value;\r\n        let tasks = [];\r\n        for(let i=0; i < relations.length; i++) {\r\n            let relation = {\r\n                type: relations[i].relationType,\r\n                typeGroup: 'COMMON'\r\n            };\r\n            console.log(\"Relation=>\",relation )\r\n            if (relations[i].direction == 'FROM') {\r\n                relation.to = relations[i].relatedEntity;\r\n                relation.from = entityId;\r\n            } else {\r\n                relation.to = entityId;\r\n                relation.from = relations[i].relatedEntity;\r\n            }\r\n            tasks.push(entityRelationService.saveRelation(relation));\r\n        }\r\n        for (let i=0; i < vm.relationsToDelete.length; i++) {\r\n            let relation = {\r\n                type: vm.relationsToDelete[i].relationType\r\n            };\r\n            if (vm.relationsToDelete[i].direction == 'FROM') {\r\n                relation.to = vm.relationsToDelete[i].relatedEntity;\r\n                relation.from = entityId;\r\n            } else {\r\n                relation.to = entityId;\r\n                relation.from = vm.relationsToDelete[i].relatedEntity;\r\n            }\r\n            tasks.push(entityRelationService.deleteRelation(relation.from, relation.type, relation.to));\r\n        }\r\n        if (tasks.length > 0) {\r\n            return widgetContext.rxjs.forkJoin(tasks);\r\n        }\r\n        return widgetContext.rxjs.of([]);\r\n    }\r\n}\r\n\r\n/*========================================================================*/\r\n/*=========================  Add entity example  =========================*/\r\n/*========================================================================*/\r\n//\r\n//let $injector = widgetContext.$scope.$injector;\r\n//let customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\r\n//let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\r\n//let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\r\n//let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\r\n//let entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\r\n//\r\n//openAddEntityDialog();\r\n//\r\n//function openAddEntityDialog() {\r\n//    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\r\n//}\r\n//\r\n//function AddEntityDialogController(instance) {\r\n//    let vm = instance;\r\n//\r\n//    vm.allowedEntityTypes = ['ASSET', 'DEVICE'];\r\n//    vm.entitySearchDirection = {\r\n//        from: \"FROM\",\r\n//        to: \"TO\"\r\n//    }\r\n//\r\n//    vm.addEntityFormGroup = vm.fb.group({\r\n//      entityName: ['', [vm.validators.required]],\r\n//      entityType: ['DEVICE'],\r\n//      entityLabel: [null],\r\n//      type: ['', [vm.validators.required]],\r\n//      attributes: vm.fb.group({\r\n//          latitude: [null],\r\n//          longitude: [null],\r\n//          address: [null],\r\n//          owner: [null],\r\n//          number: [null, [vm.validators.pattern(/^-?[0-9]+$/)]],\r\n//          booleanValue: [null]\r\n//      }),\r\n//      relations: vm.fb.array([])\r\n//    });\r\n//\r\n//    vm.cancel = function() {\r\n//        vm.dialogRef.close(null);\r\n//    };\r\n//\r\n//    vm.relations = function() {\r\n//        return vm.addEntityFormGroup.get('relations');\r\n//    };\r\n//\r\n//    vm.addRelation = function() {\r\n//        vm.relations().push(vm.fb.group({\r\n//          relatedEntity: [null, [vm.validators.required]],\r\n//          relationType: [null, [vm.validators.required]],\r\n//          direction: [null, [vm.validators.required]]\r\n//        }));\r\n//    };\r\n//\r\n//    vm.removeRelation = function(index) {\r\n//        vm.relations().removeAt(index);\r\n//        vm.relations().markAsDirty();\r\n//    };\r\n//\r\n//    vm.save = function() {\r\n//        vm.addEntityFormGroup.markAsPristine();\r\n//        saveEntityObservable().subscribe(\r\n//            function (entity) {\r\n//                widgetContext.rxjs.forkJoin([\r\n//                    saveAttributes(entity.id),\r\n//                    saveRelations(entity.id)\r\n//                ]).subscribe(\r\n//                    function () {\r\n//                        widgetContext.updateAliases();\r\n//                        vm.dialogRef.close(null);\r\n//                    }\r\n//                );\r\n//            }\r\n//        );\r\n//    };\r\n//\r\n//    function saveEntityObservable() {\r\n//        const formValues = vm.addEntityFormGroup.value;\r\n//        let entity = {\r\n//            name: formValues.entityName,\r\n//            type: formValues.type,\r\n//            label: formValues.entityLabel\r\n//        };\r\n//        if (formValues.entityType == 'ASSET') {\r\n//            return assetService.saveAsset(entity);\r\n//        } else if (formValues.entityType == 'DEVICE') {\r\n//            return deviceService.saveDevice(entity);\r\n//        }\r\n//    }\r\n//\r\n//    function saveAttributes(entityId) {\r\n//        let attributes = vm.addEntityFormGroup.get('attributes').value;\r\n//        let attributesArray = [];\r\n//        for (let key in attributes) {\r\n//            if(attributes[key] !== null) {\r\n//                attributesArray.push({key: key, value: attributes[key]});\r\n//            }\r\n//        }\r\n//        if (attributesArray.length > 0) {\r\n//            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\r\n//        }\r\n//        return widgetContext.rxjs.of([]);\r\n//    }\r\n//\r\n//    function saveRelations(entityId) {\r\n//        let relations = vm.addEntityFormGroup.get('relations').value;\r\n//        let tasks = [];\r\n//        for(let i=0; i < relations.length; i++) {\r\n//            let relation = {\r\n//                type: relations[i].relationType,\r\n//                typeGroup: 'COMMON'\r\n//            };\r\n//            if (relations[i].direction == 'FROM') {\r\n//                relation.to = relations[i].relatedEntity;\r\n//                relation.from = entityId;\r\n//            } else {\r\n//                relation.to = entityId;\r\n//                relation.from = relations[i].relatedEntity;\r\n//            }\r\n//            tasks.push(entityRelationService.saveRelation(relation));\r\n//        }\r\n//        if (tasks.length > 0) {\r\n//            return widgetContext.rxjs.forkJoin(tasks);\r\n//        }\r\n//        return widgetContext.rxjs.of([]);\r\n//    }\r\n//}\r\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "b4509bab-0496-99df-c7be-141e61abc30b"
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "43a5e0fe-2a2f-775e-694e-3e518c4e57bf"
        },
        "3a682914-be7a-9d61-42aa-009b5c543ca2" : {
          "isSystemType" : true,
          "bundleAlias" : "scheduling",
          "typeAlias" : "scheduler_events",
          "type" : "static",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 7.5,
          "sizeY" : 4.5,
          "config" : {
            "timewindow" : {
              "realtime" : {
                "interval" : 1000,
                "timewindowMs" : 86400000
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "name",
              "displayCreatedTime" : false,
              "displayCustomer" : true,
              "title" : "Scheduler events",
              "displayType" : true,
              "enabledViews" : "both",
              "customEventTypes" : [ ]
            },
            "title" : "New Scheduler events",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ ],
            "enableDataExport" : true,
            "widgetStyle" : {
              "borderRadius" : ".75rem"
            },
            "actions" : { },
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "3a682914-be7a-9d61-42aa-009b5c543ca2"
        }
      },
      "states" : {
        "default" : {
          "name" : "Tenant Home",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "82c8a94a-6262-2f67-1ccb-9ab12bc14495" : {
                  "sizeX" : 64,
                  "sizeY" : 3,
                  "row" : 0,
                  "col" : 0
                },
                "515b8bb4-cf42-1bb2-1e94-3fe6469e6362" : {
                  "sizeX" : 41,
                  "sizeY" : 10,
                  "row" : 4,
                  "col" : 1
                },
                "6d9066b3-0658-2b36-61f7-799aab109332" : {
                  "sizeX" : 11,
                  "sizeY" : 16,
                  "row" : 15,
                  "col" : 31
                },
                "1ca6e4ae-b106-045b-686f-07394ba03065" : {
                  "sizeX" : 19,
                  "sizeY" : 16,
                  "row" : 15,
                  "col" : 11
                },
                "2c4b245b-0b6a-77a0-51e9-aa7885ace5a8" : {
                  "sizeX" : 9,
                  "sizeY" : 16,
                  "row" : 15,
                  "col" : 1
                },
                "3a682914-be7a-9d61-42aa-009b5c543ca2" : {
                  "sizeX" : 20,
                  "sizeY" : 27,
                  "row" : 4,
                  "col" : 43
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 64,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : true,
                "backgroundImageUrl" : null,
                "mobileAutoFillHeight" : false,
                "mobileRowHeight" : 70
              }
            }
          }
        },
        "table_of_devices" : {
          "name" : "Table of devices",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "43a5e0fe-2a2f-775e-694e-3e518c4e57bf" : {
                  "sizeX" : 24,
                  "sizeY" : 16,
                  "row" : 0,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        }
      },
      "entityAliases" : {
        "1eee675a-8320-8c3e-bbba-21fe119667d5" : {
          "id" : "1eee675a-8320-8c3e-bbba-21fe119667d5",
          "alias" : "Tenant",
          "filter" : {
            "type" : "singleEntity",
            "resolveMultiple" : false,
            "singleEntity" : {
              "entityType" : "CURRENT_TENANT",
              "id" : "13814000-1dd2-11b2-8080-808080808080"
            }
          }
        },
        "afab1b83-441c-8568-e91a-c39908270516" : {
          "id" : "afab1b83-441c-8568-e91a-c39908270516",
          "alias" : "Devices",
          "filter" : {
            "type" : "entityType",
            "resolveMultiple" : true,
            "entityType" : "DEVICE"
          }
        },
        "f8297dd3-406d-fc76-0bd6-caf810b0e04f" : {
          "id" : "f8297dd3-406d-fc76-0bd6-caf810b0e04f",
          "alias" : "Device with asset relation",
          "filter" : {
            "type" : "deviceSearchQuery",
            "resolveMultiple" : true,
            "rootStateEntity" : false,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null,
            "rootEntity" : {
              "entityType" : "ASSET",
              "id" : "66c93d30-177d-11ef-8a81-796b974d7f03"
            },
            "direction" : "FROM",
            "maxLevel" : 8,
            "fetchLastLevelOnly" : false,
            "relationType" : null,
            "deviceTypes" : [ "JLG", "default", "Volvo", "SmartOne-C", "Scania", "Komatsu", "JDeere", "JCBC", "GT1200", "GT1030" ]
          }
        }
      },
      "filters" : {
        "c70a0c7f-474c-ca72-e729-dbcb4e204e96" : {
          "id" : "c70a0c7f-474c-ca72-e729-dbcb4e204e96",
          "filter" : "Filters devices with assets",
          "keyFilters" : [ {
            "key" : {
              "type" : "ENTITY_FIELD",
              "key" : "name"
            },
            "valueType" : "STRING",
            "predicates" : [ {
              "keyFilterPredicate" : {
                "operation" : "NOT_IN",
                "value" : {
                  "defaultValue" : "",
                  "dynamicValue" : {
                    "sourceType" : "CURRENT_TENANT",
                    "sourceAttribute" : "devicesWithAssets",
                    "inherit" : false
                  }
                },
                "ignoreCase" : false,
                "type" : "STRING"
              },
              "userInfo" : {
                "editable" : true,
                "label" : "",
                "autogeneratedLabel" : true,
                "order" : 0
              }
            } ]
          } ],
          "editable" : false
        }
      },
      "timewindow" : {
        "displayValue" : "",
        "hideInterval" : false,
        "hideLastInterval" : false,
        "hideQuickInterval" : false,
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 0,
        "realtime" : {
          "realtimeType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "quickInterval" : "CURRENT_DAY"
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1721675071186,
            "endTimeMs" : 1721761471186
          },
          "quickInterval" : "CURRENT_DAY"
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : true,
        "showEntitiesSelect" : true,
        "showDashboardTimewindow" : true,
        "showDashboardExport" : true,
        "toolbarAlwaysOpen" : true
      }
    },
    "customerId" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "23a1fa50-491a-11ef-8e9c-ed322831b9c3"
    },
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "name" : "Tenant Home",
    "ownerId" : null,
    "title" : "Tenant Home"
  },
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}