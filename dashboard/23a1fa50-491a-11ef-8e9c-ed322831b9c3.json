{
  "entityType" : "DASHBOARD",
  "entity" : {
    "assignedCustomers" : null,
    "configuration" : {
      "description" : "",
      "widgets" : {
        "82c8a94a-6262-2f67-1ccb-9ab12bc14495" : {
          "isSystemType" : true,
          "bundleAlias" : "cards",
          "typeAlias" : "html_value_card",
          "type" : "latest",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "1eee675a-8320-8c3e-bbba-21fe119667d5",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "title",
                "type" : "entityField",
                "label" : "Title",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.6255497294521524
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1721675557669,
                  "endTimeMs" : 1721761957669
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#008657",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<div class='card'>${Title}</div>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   box-sizing: border-box;\n   font-size: 160%;\n   color: white;\n   \n   padding: 10px;\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n   justify-content: space-around;\n   box-sizing: border-box;\n}\n"
            },
            "title" : "New HTML Value Card",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : {
              "borderRadius" : ".75rem"
            },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "enableDataExport" : false,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "82c8a94a-6262-2f67-1ccb-9ab12bc14495"
        },
        "515b8bb4-cf42-1bb2-1e94-3fe6469e6362" : {
          "isSystemType" : true,
          "bundleAlias" : "cards",
          "typeAlias" : "html_card",
          "type" : "static",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "cardHtml" : "<div class='nav-links'>\n    <button id='view_tcentral' mat-icon-button color=\"primary\" matTooltip=\"T.Central\" >\n        <img src=\"https://qr.twindimension.com/icons/svg/monitoring.svg\"/>\n        <p>T.Central</p>\n    </button>\n    \n    <button id='view_map' mat-icon-button color=\"primary\" matTooltip=\"Monitoreo\" >\n        <img src=\"https://qr.twindimension.com/icons/svg/map.svg\"/>\n        <p>Monitoreo de flotas</p>\n    </button>\n    \n    <button id='view_status' mat-icon-button color=\"primary\" matTooltip=\"Estado de dispositivos\" >\n        <img src=\"https://qr.twindimension.com/icons/svg/monitoring.svg\"/>\n        <p>Estado de dispositivos</p>\n    </button>\n    \n    <!--<button id='view_report' mat-icon-button color=\"primary\" matTooltip=\"Reportes\" >\n        <img src=\"https://qr.twindimension.com/icons/svg/report.svg\"/>\n        <p>Reportes</p>\n    </button>-->\n</div>",
              "cardCss" : ".nav-links {\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    padding: 10px;\n}\n\n.nav-links button { \n    border: none; \n    background: transparent;\n    width: 160px;\n    height: 160px;\n    border-radius: 9px;\n    padding-top: 1rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n}\n\n.nav-links button:hover {\n    background: rgba(128,128,128, 0.2);\n}\n\n.nav-links button p {\n    font-size: 0.8rem;\n    margin: 0;\n    /*background: orange;*/\n}\n\n.nav-links button img {\n    user-select: none;\n    background-repeat: no-repeat;\n    display: inline-block;\n    fill: currentColor;\n    height: 90px;\n    width: 90px;\n    overflow: hidden;\n    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.5));\n}"
            },
            "title" : "Navigation Links",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "enableDataExport" : true,
            "widgetStyle" : {
              "borderRadius" : ".75rem"
            },
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "showLegend" : false,
            "actions" : {
              "elementClick" : [ {
                "name" : "view_status",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboard",
                "targetDashboardStateId" : null,
                "setEntityId" : false,
                "stateEntityParamName" : null,
                "openNewBrowserTab" : false,
                "targetDashboardId" : "83209e70-237a-11ef-832d-975fea959a44",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "1257f267-dbc5-b692-2337-d7ca4a47e78f"
              }, {
                "name" : "view_map",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboard",
                "targetDashboardStateId" : null,
                "setEntityId" : false,
                "stateEntityParamName" : null,
                "openNewBrowserTab" : false,
                "targetDashboardId" : "e89800b0-176b-11ef-8a81-796b974d7f03",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "28ea7e9a-b4f8-946e-7993-b9d79ecca7c0"
              }, {
                "name" : "view_report",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboard",
                "targetDashboardStateId" : "view_report",
                "setEntityId" : false,
                "stateEntityParamName" : null,
                "openNewBrowserTab" : false,
                "targetDashboardId" : "e89800b0-176b-11ef-8a81-796b974d7f03",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "4c13e2e7-8336-4296-c3ca-e3e8d468233a"
              }, {
                "name" : "view_tcentral",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "const url = \"https://app.twindimension.com/\"\nconst win = window.open(url, '_target')\nwin.focus();",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "2bec7bba-c6da-0366-e99e-1a4b873ba8f7"
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "515b8bb4-cf42-1bb2-1e94-3fe6469e6362"
        },
        "6d9066b3-0658-2b36-61f7-799aab109332" : {
          "isSystemType" : true,
          "bundleAlias" : "home_page_widgets",
          "typeAlias" : "usage_info",
          "type" : "static",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : { },
            "title" : "Usage info",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : {
              "borderRadius" : ".75rem"
            },
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "showLegend" : false,
            "datasources" : [ ],
            "enableDataExport" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "6d9066b3-0658-2b36-61f7-799aab109332"
        },
        "1ca6e4ae-b106-045b-686f-07394ba03065" : {
          "isSystemType" : true,
          "bundleAlias" : "home_page_widgets",
          "typeAlias" : "quick_links",
          "type" : "static",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "columns" : 2
            },
            "title" : "New Quick links",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : {
              "borderRadius" : ".75rem"
            },
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "showLegend" : false,
            "datasources" : [ ],
            "enableDataExport" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "1ca6e4ae-b106-045b-686f-07394ba03065"
        },
        "2c4b245b-0b6a-77a0-51e9-aa7885ace5a8" : {
          "isSystemType" : true,
          "bundleAlias" : "cards",
          "typeAlias" : "markdown_card",
          "type" : "latest",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 5,
          "sizeY" : 3.5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "afab1b83-441c-8568-e91a-c39908270516",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "DataOrigin",
                "type" : "attribute",
                "label" : "DataOrigin",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.2559483389443984
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            }, {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "f8297dd3-406d-fc76-0bd6-caf810b0e04f",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "DataOrigin",
                "type" : "attribute",
                "label" : "DataOrigin",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.3635586728324115,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "withRelation",
                "type" : "attribute",
                "label" : "withRelation",
                "color" : "#f44336",
                "settings" : { },
                "_hash" : 0.6938798868430843,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : true,
                "postFuncBody" : "return true;"
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1721744502800,
                  "endTimeMs" : 1721830902800
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "useMarkdownTextFunction" : true,
              "markdownTextFunction" : "const devicesWithAssets  = data.filter((device)=>device.withRelation).map(device => device.entityId);\nconst filteredDevices = data.filter(device => !devicesWithAssets.includes(device.entityId));\nconst params = ctx.stateController.getStateParams()\n\nconst hydrateParams = {\n    ...params,\n    devicesWithAssets\n}\n\nctx.stateController.updateState(null, hydrateParams,)\nreturn `\n<button mat-flat-button id=\"table_devices\" style=\"width:100%; height:100% ;\" >\n    <div class=\"card\">\n        <div class=\"title\">Dispositivos sin flota asociada:</div>\n        <div class=\"count\">${filteredDevices.length}</div>\n    </div>\n</button>`\n    \n",
              "applyDefaultMarkdownStyle" : true,
              "markdownCss" : ".card{\n    display:flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap:1rem;\n}\n.title {\n    color: #888;\n    font-size: 0.9rem;\n}\n.count {\n    font-size: 1.2rem;\n}\n"
            },
            "title" : "New Markdown/HTML Card",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : {
              "borderRadius" : ".75rem"
            },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "useDashboardTimewindow" : true,
            "enableDataExport" : false,
            "widgetCss" : "",
            "pageSize" : 2500,
            "noDataDisplayMessage" : "",
            "actions" : {
              "elementClick" : [ {
                "name" : "table_devices",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "table_of_devices",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openRightLayout" : false,
                "dialogTitle" : "Dispositivos",
                "dialogHideDashboardToolbar" : true,
                "dialogWidth" : null,
                "dialogHeight" : null,
                "openInSeparateDialog" : true,
                "openInPopover" : false,
                "id" : "8ed2c68c-8855-8b36-2439-2fb668402ae5"
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "2c4b245b-0b6a-77a0-51e9-aa7885ace5a8"
        },
        "951e5236-186a-70c9-ada0-e806eb7bc18c" : {
          "isSystemType" : true,
          "bundleAlias" : "rds_widget_collection",
          "typeAlias" : "entities_table",
          "type" : "latest",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 11.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1721746808857,
                  "endTimeMs" : 1721833208857
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "entitiesTitle" : "Dispositivos sin flota asociada",
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : true,
              "entityNameColumnTitle" : "Serial",
              "displayEntityLabel" : false,
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 30,
              "defaultSortOrder" : "entityName",
              "useRowStyleFunction" : false
            },
            "title" : "New TwinDimension Entities table filter relations",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "afab1b83-441c-8568-e91a-c39908270516",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "DataOrigin",
                "type" : "attribute",
                "label" : "DataOrigin",
                "color" : "#2196f3",
                "settings" : {
                  "showAverage" : false,
                  "chartType" : "CUTOMER"
                },
                "_hash" : 0.33931089426356986
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "displayTimewindow" : true,
            "actions" : {
              "actionCellButton" : [ {
                "name" : "Edit relation",
                "icon" : "share",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<!--=======================================================================-->\n<!--=====  There are two example templates: for edit and add entity   =====-->\n<!--=======================================================================-->\n<!--========================  Edit entity example  ========================-->\n<!--=======================================================================-->\n<!-- -->\n<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"basic\">\n        <h2>Editar {{entityType.toLowerCase()}} {{entityName}}</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <!--<div class=\"relations-list old-relations\">-->\n        <!--    <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relaciones existentes</div>-->\n        <!--    <div class=\"body\" [fxShow]=\"oldRelations().length\">-->\n        <!--        <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"oldRelations\" -->\n        <!--             *ngFor=\"let relation of oldRelations().controls; let i = index;\">-->\n        <!--            <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">-->\n        <!--                <div fxFlex fxLayout=\"column\">-->\n        <!--                    <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n        <!--                        <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">-->\n        <!--                            <mat-label>Dirección</mat-label>-->\n        <!--                            <mat-select formControlName=\"direction\" name=\"direction\">-->\n        <!--                                <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">-->\n        <!--                                    {{ (\"relation.search-direction.\" + direction.value) | translate}}-->\n        <!--                                </mat-option>-->\n        <!--                            </mat-select>-->\n        <!--                            <mat-error *ngIf=\"relation.get('direction').hasError('required')\">-->\n        <!--                                Relation direction is required.-->\n        <!--                            </mat-error>-->\n        <!--                        </mat-form-field>-->\n        <!--                        <tb-relation-type-autocomplete-->\n        <!--                                fxFlex class=\"mat-block\"-->\n        <!--                                formControlName=\"relationType\"-->\n        <!--                                required=\"true\">-->\n        <!--                        </tb-relation-type-autocomplete>-->\n        <!--                    </div>-->\n        <!--                    <div fxLayout=\"row\" fxLayout.xs=\"column\">-->\n        <!--                        <tb-entity-select-->\n        <!--                                fxFlex class=\"mat-block\"-->\n        <!--                                required=\"true\"-->\n        <!--                                formControlName=\"relatedEntity\">-->\n        <!--                        </tb-entity-select>-->\n        <!--                    </div>-->\n        <!--                </div>-->\n        <!--                <div fxLayout=\"column\" fxLayoutAlign=\"center center\">-->\n        <!--                    <button mat-icon-button color=\"primary\"-->\n        <!--                            aria-label=\"Remove\"-->\n        <!--                            type=\"button\"-->\n        <!--                            (click)=\"removeOldRelation(i, relation.value)\"-->\n        <!--                            matTooltip=\"Remover relación\"-->\n        <!--                            matTooltipPosition=\"above\">-->\n        <!--                        <mat-icon>close</mat-icon>-->\n        <!--                    </button>-->\n        <!--                </div>-->\n        <!--            </div>-->\n        <!--        </div>-->\n        <!--    </div>-->\n        <!--</div>-->\n        <div class=\"relations-list\">\n            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Nuevas Relaciones</div>\n            <div class=\"body\" [fxShow]=\"relations().length\">\n                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"relations\" *ngFor=\"let relation of relations().controls; let i = index;\">\n                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">\n                        <div fxFlex fxLayout=\"column\">\n                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">\n                                    <mat-label>Dirección</mat-label>\n                                    <mat-select formControlName=\"direction\" name=\"direction\">\n                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">\n                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}\n                                        </mat-option>\n                                    </mat-select>\n                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">\n                                        Relation direction is required.\n                                    </mat-error>\n                                </mat-form-field>\n                                <tb-relation-type-autocomplete\n                                        fxFlex class=\"mat-block\"\n                                        formControlName=\"relationType\"\n                                        [required]=\"true\">\n                                </tb-relation-type-autocomplete>\n                            </div>\n                            <div fxLayout=\"row\" fxLayout.xs=\"column\">\n                                <tb-entity-select\n                                        fxFlex class=\"mat-block\"\n                                        [required]=\"true\"\n                                        formControlName=\"relatedEntity\">\n                                </tb-entity-select>\n                            </div>\n                        </div>\n                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\n                            <button mat-icon-button color=\"primary\"\n                                    aria-label=\"Remove\"\n                                    type=\"button\"\n                                    (click)=\"removeRelation(i)\"\n                                    matTooltip=\"Remover relación\"\n                                    matTooltipPosition=\"above\">\n                                <mat-icon>close</mat-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <button mat-raised-button color=\"primary\"\n                        type=\"button\"\n                        (click)=\"addRelation()\"\n                        matTooltip=\"Agregar realción\"\n                        matTooltipPosition=\"above\">\n                    Add\n                </button>\n            </div>\n        </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancelar\n        </button>\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\n            Guardar\n        </button>\n    </div>\n</form>\n<!---->\n<!--========================================================================-->\n<!--=========================  Add entity example  =========================-->\n<!--========================================================================-->\n<!---->\n<!--<form #addEntityForm=\"ngForm\" [formGroup]=\"addEntityFormGroup\"-->\n<!--      (ngSubmit)=\"save()\" class=\"add-entity-form\">-->\n<!--    <mat-toolbar fxLayout=\"row\" color=\"primary\">-->\n<!--        <h2>Add entity</h2>-->\n<!--        <span fxFlex></span>-->\n<!--        <button mat-icon-button (click)=\"cancel()\" type=\"button\">-->\n<!--            <mat-icon class=\"material-icons\">close</mat-icon>-->\n<!--        </button>-->\n<!--    </mat-toolbar>-->\n<!--    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">-->\n<!--    </mat-progress-bar>-->\n<!--    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>-->\n<!--    <div mat-dialog-content fxLayout=\"column\">-->\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Name</mat-label>-->\n<!--                <input matInput formControlName=\"entityName\" required>-->\n<!--                <mat-error *ngIf=\"addEntityFormGroup.get('entityName').hasError('required')\">-->\n<!--                    Entity name is required.-->\n<!--                </mat-error>-->\n<!--            </mat-form-field>-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Label</mat-label>-->\n<!--                <input matInput formControlName=\"entityLabel\" >-->\n<!--            </mat-form-field>-->\n<!--        </div>-->\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--            <tb-entity-type-select-->\n<!--                    class=\"mat-block\"-->\n<!--                    formControlName=\"entityType\"-->\n<!--                    [showLabel]=\"true\"-->\n<!--                    [allowedEntityTypes]=\"allowedEntityTypes\"-->\n<!--            ></tb-entity-type-select>-->\n<!--            <tb-entity-subtype-autocomplete-->\n<!--                    fxFlex *ngIf=\"addEntityFormGroup.get('entityType').value == 'ASSET'\"-->\n<!--                    class=\"mat-block\"-->\n<!--                    formControlName=\"type\"-->\n<!--                    [required]=\"true\"-->\n<!--                    [entityType]=\"'ASSET'\"-->\n<!--            ></tb-entity-subtype-autocomplete>-->\n<!--            <tb-entity-subtype-autocomplete-->\n<!--                    fxFlex *ngIf=\"addEntityFormGroup.get('entityType').value != 'ASSET'\"-->\n<!--                    class=\"mat-block\"-->\n<!--                    formControlName=\"type\"-->\n<!--                    [required]=\"true\"-->\n<!--                    [entityType]=\"'DEVICE'\"-->\n<!--            ></tb-entity-subtype-autocomplete>-->\n<!--        </div>-->\n<!--        <div formGroupName=\"attributes\" fxLayout=\"column\">-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Latitude</mat-label>-->\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">-->\n<!--                </mat-form-field>-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Longitude</mat-label>-->\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Address</mat-label>-->\n<!--                    <input matInput formControlName=\"address\">-->\n<!--                </mat-form-field>-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Owner</mat-label>-->\n<!--                    <input matInput formControlName=\"owner\">-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Integer Value</mat-label>-->\n<!--                    <input type=\"number\" step=\"1\" matInput formControlName=\"number\">-->\n<!--                    <mat-error *ngIf=\"addEntityFormGroup.get('attributes.number').hasError('pattern')\">-->\n<!--                        Invalid integer value.-->\n<!--                    </mat-error>-->\n<!--                </mat-form-field>-->\n<!--                <div class=\"boolean-value-input\" fxLayout=\"column\" fxLayoutAlign=\"center start\" fxFlex>-->\n<!--                    <label class=\"checkbox-label\">Boolean Value</label>-->\n<!--                    <mat-checkbox formControlName=\"booleanValue\" style=\"margin-bottom: 40px;\">-->\n<!--                        {{ (addEntityFormGroup.get('attributes.booleanValue').value ? \"value.true\" : \"value.false\") | translate }}-->\n<!--                    </mat-checkbox>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--        <div class=\"relations-list\">-->\n<!--            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\n<!--            <div class=\"body\" [fxShow]=\"relations().length\">-->\n<!--                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"relations\" *ngFor=\"let relation of relations().controls; let i = index;\">-->\n<!--                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">-->\n<!--                        <div fxFlex fxLayout=\"column\">-->\n<!--                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">-->\n<!--                                    <mat-label>Direction</mat-label>-->\n<!--                                    <mat-select formControlName=\"direction\" name=\"direction\">-->\n<!--                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">-->\n<!--                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}-->\n<!--                                        </mat-option>-->\n<!--                                    </mat-select>-->\n<!--                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">-->\n<!--                                        Relation direction is required.-->\n<!--                                    </mat-error>-->\n<!--                                </mat-form-field>-->\n<!--                                <tb-relation-type-autocomplete-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        formControlName=\"relationType\"-->\n<!--                                        [required]=\"true\">-->\n<!--                                </tb-relation-type-autocomplete>-->\n<!--                            </div>-->\n<!--                            <div fxLayout=\"row\" fxLayout.xs=\"column\">-->\n<!--                                <tb-entity-select-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        [required]=\"true\"-->\n<!--                                        formControlName=\"relatedEntity\">-->\n<!--                                </tb-entity-select>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">-->\n<!--                            <button mat-icon-button color=\"primary\"-->\n<!--                                    aria-label=\"Remove\"-->\n<!--                                    type=\"button\"-->\n<!--                                    (click)=\"removeRelation(i)\"-->\n<!--                                    matTooltip=\"Remove relation\"-->\n<!--                                    matTooltipPosition=\"above\">-->\n<!--                                <mat-icon>close</mat-icon>-->\n<!--                            </button>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--            <div>-->\n<!--                <button mat-raised-button color=\"primary\"-->\n<!--                        type=\"button\"-->\n<!--                        (click)=\"addRelation()\"-->\n<!--                        matTooltip=\"Add Relation\"-->\n<!--                        matTooltipPosition=\"above\">-->\n<!--                    Add-->\n<!--                </button>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--    </div>-->\n<!--    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">-->\n<!--        <button mat-button color=\"primary\"-->\n<!--                type=\"button\"-->\n<!--                [disabled]=\"(isLoading$ | async)\"-->\n<!--                (click)=\"cancel()\" cdkFocusInitial>-->\n<!--            Cancel-->\n<!--        </button>-->\n<!--        <button mat-button mat-raised-button color=\"primary\"-->\n<!--                type=\"submit\"-->\n<!--                [disabled]=\"(isLoading$ | async) || addEntityForm.invalid || !addEntityForm.dirty\">-->\n<!--            Create-->\n<!--        </button>-->\n<!--    </div>-->\n<!--</form>-->\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "/*=======================================================================*/\n/*=====  There are three examples: for delete, edit and add entity  =====*/\n/*=======================================================================*/\n/*=======================  Delete entity example  =======================*/\n/*=======================================================================*/\n//\n// let $injector = widgetContext.$scope.$injector;\n// let dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\n// let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n// let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n\n// openDeleteEntityDialog();\n\n// function openDeleteEntityDialog() {\n//     let title = 'Delete ' + entityId.entityType.toLowerCase() + ' ' +\n//                 entityName;\n//     let content = 'Are you sure you want to delete the ' +\n//                  entityId.entityType.toLowerCase() + ' ' + entityName + '?';\n//     dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n//         function(result) {\n//             if (result) {\n//                 deleteEntity();\n//             }\n//         }\n//     );\n// }\n// //\n// function deleteEntity() {\n//     deleteEntityObservable(entityId).subscribe(\n//         function success() {\n//             widgetContext.updateAliases();\n//         },\n//         function fail() {\n//             showErrorDialog();\n//         }\n//     );\n// }\n\n// function deleteEntityObservable(entityId) {\n//     if (entityId.entityType == \"ASSET\") {\n//         return assetService.deleteAsset(entityId.id);\n//     } else if (entityId.entityType == \"DEVICE\") {\n//         return deviceService.deleteDevice(entityId.id);\n//     }\n// }\n\n// function showErrorDialog() {\n//     let title = 'Error';\n//     let content = 'An error occurred while deleting the entity. Please try again.';\n//     dialogs.alert(title, content, 'CLOSE').subscribe(\n//         function(result) {}\n//     );\n// }\n//\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n//\nlet $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityService = $injector.get(\n  widgetContext.servicesMap.get('entityService')\n);\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet deviceService = $injector.get(\n  widgetContext.servicesMap.get('deviceService')\n);\nlet attributeService = $injector.get(\n  widgetContext.servicesMap.get('attributeService')\n);\nlet entityRelationService = $injector.get(\n  widgetContext.servicesMap.get('entityRelationService')\n);\nconsole.log('Relation=>', widgetContext);\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n  customDialog\n    .customDialog(htmlTemplate, EditEntityDialogController)\n    .subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n  let vm = instance;\n\n  vm.entityName = entityName;\n  vm.entityType = entityId.entityType;\n  vm.entitySearchDirection = {\n    from: 'FROM',\n    to: 'TO',\n  };\n  vm.attributes = {};\n  vm.oldRelationsData = [];\n  vm.relationsToDelete = [];\n  vm.entity = {};\n\n  vm.editEntityFormGroup = vm.fb.group({\n    entityName: ['', [vm.validators.required]],\n    entityType: [null],\n    entityLabel: [null],\n    type: ['', [vm.validators.required]],\n    attributes: vm.fb.group({\n      latitude: [null],\n      longitude: [null],\n      address: [null],\n      owner: [null],\n      number: [null, [vm.validators.pattern(/^-?[0-9]+$/)]],\n      booleanValue: [false],\n    }),\n    oldRelations: vm.fb.array([]),\n    relations: vm.fb.array([]),\n  });\n\n  getEntityInfo();\n\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n\n  vm.relations = function () {\n    return vm.editEntityFormGroup.get('relations');\n  };\n\n  vm.oldRelations = function () {\n    return vm.editEntityFormGroup.get('oldRelations');\n  };\n\n  vm.addRelation = function () {\n    vm.relations().push(\n      vm.fb.group({\n        relatedEntity: [null, [vm.validators.required]],\n        relationType: [null, [vm.validators.required]],\n        direction: [null, [vm.validators.required]],\n      })\n    );\n  };\n\n  function addOldRelation() {\n    vm.oldRelations().push(\n      vm.fb.group({\n        relatedEntity: [\n          { value: null, disabled: true },\n          [vm.validators.required],\n        ],\n        relationType: [\n          { value: null, disabled: true },\n          [vm.validators.required],\n        ],\n        direction: [{ value: null, disabled: true }, [vm.validators.required]],\n      })\n    );\n  }\n\n  vm.removeRelation = function (index) {\n    vm.relations().removeAt(index);\n    vm.relations().markAsDirty();\n  };\n\n  vm.removeOldRelation = function (index, relation) {\n    vm.oldRelations().removeAt(index);\n    vm.relationsToDelete.push(relation);\n    vm.oldRelations().markAsDirty();\n  };\n\n  vm.save = function () {\n    vm.editEntityFormGroup.markAsPristine();\n    widgetContext.rxjs\n      .forkJoin([\n        saveAttributes(entityId),\n        saveRelations(entityId),\n        saveEntity(),\n      ])\n      .subscribe(function () {\n        widgetContext.updateAliases();\n        vm.dialogRef.close(null);\n      });\n  };\n\n  function getEntityAttributes(attributes) {\n    for (var i = 0; i < attributes.length; i++) {\n      vm.attributes[attributes[i].key] = attributes[i].value;\n    }\n  }\n\n  function getEntityRelations(relations) {\n    let relationsFrom = relations[0];\n    let relationsTo = relations[1];\n    for (let i = 0; i < relationsFrom.length; i++) {\n      let relation = {\n        direction: 'FROM',\n        relationType: relationsFrom[i].type,\n        relatedEntity: relationsFrom[i].to,\n      };\n      vm.oldRelationsData.push(relation);\n      addOldRelation();\n    }\n    for (let i = 0; i < relationsTo.length; i++) {\n      let relation = {\n        direction: 'TO',\n        relationType: relationsTo[i].type,\n        relatedEntity: relationsTo[i].from,\n      };\n      vm.oldRelationsData.push(relation);\n      addOldRelation();\n    }\n  }\n\n  function getEntityInfo() {\n    widgetContext.rxjs\n      .forkJoin([\n        entityRelationService.findInfoByFrom(entityId),\n        entityRelationService.findInfoByTo(entityId),\n        attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE'),\n        entityService.getEntity(entityId.entityType, entityId.id),\n      ])\n      .subscribe(function (data) {\n        getEntityRelations(data.slice(0, 2));\n        getEntityAttributes(data[2]);\n        vm.entity = data[3];\n        vm.editEntityFormGroup.patchValue(\n          {\n            entityName: vm.entity.name,\n            entityType: vm.entityType,\n            entityLabel: vm.entity.label,\n            type: vm.entity.type,\n            attributes: vm.attributes,\n            oldRelations: vm.oldRelationsData,\n          },\n          { emitEvent: false }\n        );\n      });\n  }\n\n  function saveEntity() {\n    const formValues = vm.editEntityFormGroup.value;\n    if (vm.entity.label !== formValues.entityLabel) {\n      vm.entity.label = formValues.entityLabel;\n      if (formValues.entityType == 'ASSET') {\n        return assetService.saveAsset(vm.entity);\n      } else if (formValues.entityType == 'DEVICE') {\n        return deviceService.saveDevice(vm.entity);\n      }\n    }\n    return widgetContext.rxjs.of([]);\n  }\n\n  function saveAttributes(entityId) {\n    let attributes = vm.editEntityFormGroup.get('attributes').value;\n    let attributesArray = [];\n    for (let key in attributes) {\n      if (attributes[key] !== vm.attributes[key]) {\n        attributesArray.push({ key: key, value: attributes[key] });\n      }\n    }\n    if (attributesArray.length > 0) {\n      return attributeService.saveEntityAttributes(\n        entityId,\n        'SERVER_SCOPE',\n        attributesArray\n      );\n    }\n    return widgetContext.rxjs.of([]);\n  }\n\n  function saveRelations(entityId) {\n    let relations = vm.editEntityFormGroup.get('relations').value;\n    let tasks = [];\n    for (let i = 0; i < relations.length; i++) {\n      let relation = {\n        type: relations[i].relationType,\n        typeGroup: 'COMMON',\n      };\n      if (relations[i].direction == 'FROM') {\n        relation.to = relations[i].relatedEntity;\n        relation.from = entityId;\n      } else {\n        relation.to = entityId;\n        relation.from = relations[i].relatedEntity;\n      }\n      tasks.push(entityRelationService.saveRelation(relation));\n    }\n    for (let i = 0; i < vm.relationsToDelete.length; i++) {\n      let relation = {\n        type: vm.relationsToDelete[i].relationType,\n      };\n      if (vm.relationsToDelete[i].direction == 'FROM') {\n        relation.to = vm.relationsToDelete[i].relatedEntity;\n        relation.from = entityId;\n      } else {\n        relation.to = entityId;\n        relation.from = vm.relationsToDelete[i].relatedEntity;\n      }\n      tasks.push(\n        entityRelationService.deleteRelation(\n          relation.from,\n          relation.type,\n          relation.to\n        )\n      );\n    }\n    if (tasks.length > 0) {\n      return widgetContext.rxjs.forkJoin(tasks);\n    }\n    return widgetContext.rxjs.of([]);\n  }\n}\n\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n//\n//let $injector = widgetContext.$scope.$injector;\n//let customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\n//let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n//let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n//let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n//let entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n//\n//openAddEntityDialog();\n//\n//function openAddEntityDialog() {\n//    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\n//}\n//\n//function AddEntityDialogController(instance) {\n//    let vm = instance;\n//\n//    vm.allowedEntityTypes = ['ASSET', 'DEVICE'];\n//    vm.entitySearchDirection = {\n//        from: \"FROM\",\n//        to: \"TO\"\n//    }\n//\n//    vm.addEntityFormGroup = vm.fb.group({\n//      entityName: ['', [vm.validators.required]],\n//      entityType: ['DEVICE'],\n//      entityLabel: [null],\n//      type: ['', [vm.validators.required]],\n//      attributes: vm.fb.group({\n//          latitude: [null],\n//          longitude: [null],\n//          address: [null],\n//          owner: [null],\n//          number: [null, [vm.validators.pattern(/^-?[0-9]+$/)]],\n//          booleanValue: [null]\n//      }),\n//      relations: vm.fb.array([])\n//    });\n//\n//    vm.cancel = function() {\n//        vm.dialogRef.close(null);\n//    };\n//\n//    vm.relations = function() {\n//        return vm.addEntityFormGroup.get('relations');\n//    };\n//\n//    vm.addRelation = function() {\n//        vm.relations().push(vm.fb.group({\n//          relatedEntity: [null, [vm.validators.required]],\n//          relationType: [null, [vm.validators.required]],\n//          direction: [null, [vm.validators.required]]\n//        }));\n//    };\n//\n//    vm.removeRelation = function(index) {\n//        vm.relations().removeAt(index);\n//        vm.relations().markAsDirty();\n//    };\n//\n//    vm.save = function() {\n//        vm.addEntityFormGroup.markAsPristine();\n//        saveEntityObservable().subscribe(\n//            function (entity) {\n//                widgetContext.rxjs.forkJoin([\n//                    saveAttributes(entity.id),\n//                    saveRelations(entity.id)\n//                ]).subscribe(\n//                    function () {\n//                        widgetContext.updateAliases();\n//                        vm.dialogRef.close(null);\n//                    }\n//                );\n//            }\n//        );\n//    };\n//\n//    function saveEntityObservable() {\n//        const formValues = vm.addEntityFormGroup.value;\n//        let entity = {\n//            name: formValues.entityName,\n//            type: formValues.type,\n//            label: formValues.entityLabel\n//        };\n//        if (formValues.entityType == 'ASSET') {\n//            return assetService.saveAsset(entity);\n//        } else if (formValues.entityType == 'DEVICE') {\n//            return deviceService.saveDevice(entity);\n//        }\n//    }\n//\n//    function saveAttributes(entityId) {\n//        let attributes = vm.addEntityFormGroup.get('attributes').value;\n//        let attributesArray = [];\n//        for (let key in attributes) {\n//            if(attributes[key] !== null) {\n//                attributesArray.push({key: key, value: attributes[key]});\n//            }\n//        }\n//        if (attributesArray.length > 0) {\n//            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//\n//    function saveRelations(entityId) {\n//        let relations = vm.addEntityFormGroup.get('relations').value;\n//        let tasks = [];\n//        for(let i=0; i < relations.length; i++) {\n//            let relation = {\n//                type: relations[i].relationType,\n//                typeGroup: 'COMMON'\n//            };\n//            if (relations[i].direction == 'FROM') {\n//                relation.to = relations[i].relatedEntity;\n//                relation.from = entityId;\n//            } else {\n//                relation.to = entityId;\n//                relation.from = relations[i].relatedEntity;\n//            }\n//            tasks.push(entityRelationService.saveRelation(relation));\n//        }\n//        if (tasks.length > 0) {\n//            return widgetContext.rxjs.forkJoin(tasks);\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "a8818f11-be37-9210-a664-2d8447daa3d1"
              } ]
            },
            "showTitleIcon" : false,
            "titleTooltip" : "",
            "enableDataExport" : true,
            "widgetStyle" : {
              "borderRadius" : ".75rem"
            },
            "widgetCss" : "",
            "pageSize" : 2500,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "951e5236-186a-70c9-ada0-e806eb7bc18c"
        }
      },
      "states" : {
        "default" : {
          "name" : "Tenant Home",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "82c8a94a-6262-2f67-1ccb-9ab12bc14495" : {
                  "sizeX" : 24,
                  "sizeY" : 1,
                  "row" : 0,
                  "col" : 0
                },
                "515b8bb4-cf42-1bb2-1e94-3fe6469e6362" : {
                  "sizeX" : 13,
                  "sizeY" : 4,
                  "row" : 1,
                  "col" : 0
                },
                "6d9066b3-0658-2b36-61f7-799aab109332" : {
                  "sizeX" : 5,
                  "sizeY" : 4,
                  "row" : 1,
                  "col" : 19
                },
                "1ca6e4ae-b106-045b-686f-07394ba03065" : {
                  "sizeX" : 6,
                  "sizeY" : 4,
                  "row" : 1,
                  "col" : 13
                },
                "2c4b245b-0b6a-77a0-51e9-aa7885ace5a8" : {
                  "sizeX" : 5,
                  "sizeY" : 3,
                  "row" : 5,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : false,
                "backgroundImageUrl" : null,
                "mobileAutoFillHeight" : false,
                "mobileRowHeight" : 70
              }
            }
          }
        },
        "table_of_devices" : {
          "name" : "Table of devices",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "951e5236-186a-70c9-ada0-e806eb7bc18c" : {
                  "sizeX" : 24,
                  "sizeY" : 16,
                  "row" : 0,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        }
      },
      "entityAliases" : {
        "1eee675a-8320-8c3e-bbba-21fe119667d5" : {
          "id" : "1eee675a-8320-8c3e-bbba-21fe119667d5",
          "alias" : "Tenant",
          "filter" : {
            "type" : "singleEntity",
            "resolveMultiple" : false,
            "singleEntity" : {
              "entityType" : "CURRENT_TENANT",
              "id" : "13814000-1dd2-11b2-8080-808080808080"
            }
          }
        },
        "afab1b83-441c-8568-e91a-c39908270516" : {
          "id" : "afab1b83-441c-8568-e91a-c39908270516",
          "alias" : "Devices",
          "filter" : {
            "type" : "entityType",
            "resolveMultiple" : true,
            "entityType" : "DEVICE"
          }
        },
        "f8297dd3-406d-fc76-0bd6-caf810b0e04f" : {
          "id" : "f8297dd3-406d-fc76-0bd6-caf810b0e04f",
          "alias" : "Device with asset relation",
          "filter" : {
            "type" : "deviceSearchQuery",
            "resolveMultiple" : true,
            "rootStateEntity" : false,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null,
            "rootEntity" : {
              "entityType" : "ASSET",
              "id" : "66c93d30-177d-11ef-8a81-796b974d7f03"
            },
            "direction" : "FROM",
            "maxLevel" : 8,
            "fetchLastLevelOnly" : false,
            "relationType" : null,
            "deviceTypes" : [ "JLG", "default", "Volvo", "SmartOne-C", "Scania", "Komatsu", "JDeere", "JCBC", "GT1200", "GT1030" ]
          }
        }
      },
      "filters" : { },
      "timewindow" : {
        "displayValue" : "",
        "hideInterval" : false,
        "hideLastInterval" : false,
        "hideQuickInterval" : false,
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 0,
        "realtime" : {
          "realtimeType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "quickInterval" : "CURRENT_DAY"
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1721675071186,
            "endTimeMs" : 1721761471186
          },
          "quickInterval" : "CURRENT_DAY"
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : true,
        "showEntitiesSelect" : true,
        "showDashboardTimewindow" : true,
        "showDashboardExport" : true,
        "toolbarAlwaysOpen" : true
      }
    },
    "customerId" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "23a1fa50-491a-11ef-8e9c-ed322831b9c3"
    },
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "name" : "Tenant Home",
    "ownerId" : null,
    "title" : "Tenant Home"
  },
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}