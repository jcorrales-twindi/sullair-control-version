{
  "entityType" : "DASHBOARD",
  "entity" : {
    "assignedCustomers" : null,
    "configuration" : {
      "widgets" : {
        "2455b3d4-55e6-bbc1-eae9-064c85bb3d91" : {
          "isSystemType" : true,
          "bundleAlias" : "rds_widget_collection",
          "typeAlias" : "report_stepper2",
          "type" : "timeseries",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 13,
          "sizeY" : 8.5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "413e8c5a-0f77-96be-e0bd-837ad9f542be",
              "filterId" : "3a43ecc0-b83b-3486-fec4-194adaefd694",
              "dataKeys" : [ {
                "name" : "CumulativeOperatingHours",
                "type" : "timeseries",
                "label" : "CumulativeOperatingHours",
                "color" : "#2196f3",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "useCellContentFunction" : true,
                  "cellContentFunction" : "let accData\r\ntry {\r\n    const dataUtilization = ctx.data.find(({datasource,dataKey}) => {\r\n            return datasource.entityId == entity.id.id&&dataKey.name=='CumulativeOperatingHours'\r\n        })\r\n    if (!dataUtilization.data.length) return value;\r\n    const firtsValue = dataUtilization.data[0][1]\r\n    const secondValue = dataUtilization.data[dataUtilization.data.length - 1][1]\r\n    console.log(\"Data=>\",secondValue, firtsValue, dataUtilization.data)\r\n    return convertMsToHM((secondValue - firtsValue)*1000*60*60)\r\n    \r\n}catch(e){\r\n    console.log(\"ErrorCumulativeHours=>\",e)\r\n    return value\r\n}\r\n\r\n\r\nfunction padTo2Digits(num) {\r\n    return num.toString().padStart(2, '0');\r\n}\r\n\r\nfunction convertMsToHM(milliseconds) {\r\n    let seconds = Math.floor(milliseconds / 1000);\r\n    let minutes = Math.floor(seconds / 60);\r\n    let hours = Math.floor(minutes / 60);\r\n\r\n    seconds = seconds % 60;\r\n    // 👇️ if seconds are greater than 30, round minutes up (optional)\r\n    // minutes = seconds >= 30 ? minutes + 1 : minutes;\r\n\r\n    minutes = minutes % 60;\r\n\r\n    // 👇️ If you don't want to roll hours over, e.g. 24 to 00\r\n    // 👇️ comment (or remove) the line below\r\n    // commenting next line gets you `24:00:00` instead of `00:00:00`\r\n    // or `36:15:31` instead of `12:15:31`, etc.\r\n    \r\n    //   hours = hours % 24;\r\n\r\n    return `${padTo2Digits(hours)}:${padTo2Digits(minutes)}:${padTo2Digits(seconds)}`;\r\n}",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.16195592619917476,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "Binary1QualifiedInput",
                "type" : "timeseries",
                "label" : "Binary1QualifiedInput",
                "color" : "#4caf50",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "useCellContentFunction" : true,
                  "cellContentFunction" : "let accData\r\ntry {\r\n    // console.log(\"entity=>\", ctx,)\r\n\r\n    const dataUtilization = ctx.data.find(({datasource,dataKey}) => {\r\n            return datasource.entityId == entity.id.id&&dataKey.name=='Binary1QualifiedInput'\r\n        })\r\n    // console.log(\"dataUtilization=>\", dataUtilization)\r\n    if (!dataUtilization.data.length) return value;\r\n\r\n    const lengtData = dataUtilization.data.length;\r\n    // console.log(\"DateFirts&End=>\", new Date(dataUtilization\r\n    //     .data[0][0]), new Date(dataUtilization.data[\r\n    //     lengtData - 1][0]))\r\n    accData = dataUtilization.data.reduce((acc, curr,\r\n        ind) => {\r\n        //firts call\r\n        if (ind == 0) {\r\n            // console.log(\"FirtsCall=>\", acc, curr,\r\n            //     ind)\r\n            return {\r\n                accHours: 0,\r\n                prevState: curr[1],\r\n                prevTime: curr[0]\r\n            }\r\n        }\r\n\r\n        //last call\r\n        if (ind == lengtData - 1) {\r\n            const accHours = acc.accHours + (acc\r\n                .prevState ? curr[0] - acc\r\n                .prevTime : 0)\r\n            return {\r\n                accHours: accHours,\r\n                prevState: curr[1],\r\n                prevTime: curr[0]\r\n            }\r\n        }\r\n\r\n        if (curr[1]) {\r\n            return {\r\n                accHours: acc.accHours,\r\n                prevState: curr[1],\r\n                prevTime: acc\r\n                .prevState ? acc\r\n                    .prevTime : curr[0]\r\n            }\r\n        }\r\n\r\n\r\n        const accHours = acc.accHours + (acc\r\n                .prevState ? curr[0] - acc\r\n            .prevTime : 0)\r\n        return {\r\n            accHours: accHours,\r\n            prevState: curr[1],\r\n            prevTime: curr[0]\r\n        }\r\n\r\n\r\n    }, {\r\n        accHours: 0,\r\n        prevState: false,\r\n        prevTime: 0\r\n    })\r\n    return accData ? convertMsToHM(accData.accHours) : value\r\n    /* code */\r\n} catch (e) {\r\n    console.log(\"ErrorAll=>\", e)\r\n    return value\r\n}\r\n\r\nfunction padTo2Digits(num) {\r\n    return num.toString().padStart(2, '0');\r\n}\r\n\r\nfunction convertMsToHM(milliseconds) {\r\n    let seconds = Math.floor(milliseconds / 1000);\r\n    let minutes = Math.floor(seconds / 60);\r\n    let hours = Math.floor(minutes / 60);\r\n\r\n    seconds = seconds % 60;\r\n    // 👇️ if seconds are greater than 30, round minutes up (optional)\r\n    // minutes = seconds >= 30 ? minutes + 1 : minutes;\r\n\r\n    minutes = minutes % 60;\r\n\r\n    // 👇️ If you don't want to roll hours over, e.g. 24 to 00\r\n    // 👇️ comment (or remove) the line below\r\n    // commenting next line gets you `24:00:00` instead of `00:00:00`\r\n    // or `36:15:31` instead of `12:15:31`, etc.\r\n    \r\n    //   hours = hours % 24;\r\n\r\n    return `${padTo2Digits(hours)}:${padTo2Digits(minutes)}:${padTo2Digits(seconds)}`;\r\n}",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.918801119161798,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "Horas",
                "type" : "timeseries",
                "label" : "Horas",
                "color" : "#f44336",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "useCellContentFunction" : true,
                  "cellContentFunction" : "let accData\r\ntry {\r\n    const dataUtilization = ctx.data.find(({datasource,dataKey,data}) => {\r\n            return datasource.entityId == entity.id.id&&data.length\r\n        })\r\n    if (!dataUtilization.data.length) return value;\r\n    \r\n    const isCumulative = dataUtilization.dataKey.name =='CumulativeOperatingHours'\r\n    if(isCumulative){\r\n    const firtsValue = dataUtilization.data[0][1]\r\n    const secondValue = dataUtilization.data[dataUtilization.data.length - 1][1]\r\n    // console.log(\"Data=>\",secondValue, firtsValue, dataUtilization.data)\r\n    return convertMsToHM((secondValue - firtsValue)*1000*60*60)\r\n    }\r\n    \r\n    const lengtData = dataUtilization.data.length;\r\n    // console.log(\"DateFirts&End=>\", new Date(dataUtilization\r\n    //     .data[0][0]), new Date(dataUtilization.data[\r\n    //     lengtData - 1][0]))\r\n    accData = dataUtilization.data.reduce((acc, curr,\r\n        ind) => {\r\n        //firts call\r\n        if (ind == 0) {\r\n            // console.log(\"FirtsCall=>\", acc, curr,\r\n            //     ind)\r\n            return {\r\n                accHours: 0,\r\n                prevState: curr[1],\r\n                prevTime: curr[0]\r\n            }\r\n        }\r\n\r\n        //last call\r\n        if (ind == lengtData - 1) {\r\n            const accHours = acc.accHours + (acc\r\n                .prevState ? curr[0] - acc\r\n                .prevTime : 0)\r\n            return {\r\n                accHours: accHours,\r\n                prevState: curr[1],\r\n                prevTime: curr[0]\r\n            }\r\n        }\r\n\r\n        if (curr[1]) {\r\n            return {\r\n                accHours: acc.accHours,\r\n                prevState: curr[1],\r\n                prevTime: acc\r\n                .prevState ? acc\r\n                    .prevTime : curr[0]\r\n            }\r\n        }\r\n\r\n\r\n        const accHours = acc.accHours + (acc\r\n                .prevState ? curr[0] - acc\r\n            .prevTime : 0)\r\n        return {\r\n            accHours: accHours,\r\n            prevState: curr[1],\r\n            prevTime: curr[0]\r\n        }\r\n\r\n\r\n    }, {\r\n        accHours: 0,\r\n        prevState: false,\r\n        prevTime: 0\r\n    })\r\n    return accData ? convertMsToHM(accData.accHours) : value\r\n    \r\n}catch(e){\r\n    console.log(\"ErrorCumulativeHours=>\",e)\r\n    return value\r\n}\r\n\r\n\r\nfunction padTo2Digits(num) {\r\n    return num.toString().padStart(2, '0');\r\n}\r\n\r\nfunction convertMsToHM(milliseconds) {\r\n    let seconds = Math.floor(milliseconds / 1000);\r\n    let minutes = Math.floor(seconds / 60);\r\n    let hours = Math.floor(minutes / 60);\r\n\r\n    seconds = seconds % 60;\r\n    // 👇️ if seconds are greater than 30, round minutes up (optional)\r\n    // minutes = seconds >= 30 ? minutes + 1 : minutes;\r\n\r\n    minutes = minutes % 60;\r\n\r\n    // 👇️ If you don't want to roll hours over, e.g. 24 to 00\r\n    // 👇️ comment (or remove) the line below\r\n    // commenting next line gets you `24:00:00` instead of `00:00:00`\r\n    // or `36:15:31` instead of `12:15:31`, etc.\r\n    \r\n    //   hours = hours % 24;\r\n\r\n    return `${padTo2Digits(hours)}:${padTo2Digits(minutes)}:${padTo2Digits(seconds)}`;\r\n}",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.5771323498212506,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "hideInterval" : false,
              "hideLastInterval" : false,
              "hideQuickInterval" : false,
              "hideAggregation" : false,
              "hideAggInterval" : false,
              "hideTimezone" : false,
              "selectedTab" : 1,
              "history" : {
                "historyType" : 1,
                "timewindowMs" : 60000,
                "interval" : 600000,
                "fixedTimewindow" : {
                  "endTimeMs" : 1715309999999,
                  "startTimeMs" : 1714705200000
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 10673
              },
              "timezone" : null
            },
            "showTitle" : true,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "enableSearch" : true,
              "enableSelectColumnDisplay" : false,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : true,
              "entityNameColumnTitle" : "Dispositivo",
              "displayEntityLabel" : false,
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 30,
              "defaultSortOrder" : "entityName",
              "useRowStyleFunction" : false
            },
            "title" : "New TwinDimension Report stepper",
            "showTitleIcon" : false,
            "dropShadow" : true,
            "enableFullscreen" : true,
            "enableDataExport" : false,
            "widgetStyle" : { },
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "showLegend" : false,
            "titleTooltip" : "",
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "2455b3d4-55e6-bbc1-eae9-064c85bb3d91"
        },
        "f8da9b7f-ddb8-3d78-2ccf-77a8a237e6a2" : {
          "isSystemType" : true,
          "bundleAlias" : "input_widgets",
          "typeAlias" : "update_multiple_attributes",
          "type" : "latest",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "85aa3338-c76f-84e9-5f65-058cea332757",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "displayFleet",
                "type" : "attribute",
                "label" : "displayFleet",
                "color" : "#2196f3",
                "settings" : {
                  "dataKeyHidden" : false,
                  "dataKeyType" : "server",
                  "dataKeyValueType" : "select",
                  "required" : false,
                  "isEditable" : "editable",
                  "selectOptions" : [ {
                    "value" : "all",
                    "label" : "Todas"
                  }, {
                    "value" : "600",
                    "label" : "600"
                  } ],
                  "useCustomIcon" : false,
                  "useGetValueFunction" : false,
                  "useSetValueFunction" : false
                },
                "_hash" : 0.24696092725805618,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "displayConstructionSite",
                "type" : "attribute",
                "label" : "displayConstructionSite",
                "color" : "#4caf50",
                "settings" : {
                  "dataKeyHidden" : false,
                  "dataKeyType" : "server",
                  "dataKeyValueType" : "select",
                  "required" : false,
                  "isEditable" : "editable",
                  "selectOptions" : [ {
                    "value" : "all",
                    "label" : "Todas"
                  }, {
                    "value" : "obra 1",
                    "label" : "Obra 1"
                  } ],
                  "useCustomIcon" : false,
                  "useGetValueFunction" : true,
                  "getValueFunctionBody" : "return value ? value : 'all'",
                  "useSetValueFunction" : true,
                  "setValueFunctionBody" : "return value == 'all' ? null : value"
                },
                "_hash" : 0.1118910901905481,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1721930205631,
                  "endTimeMs" : 1722016605631
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "widgetTitle" : "Filtros",
              "showResultMessage" : false,
              "showActionButtons" : true,
              "updateAllValues" : false,
              "saveButtonLabel" : "Aplicar",
              "resetButtonLabel" : "cancelar",
              "showGroupTitle" : false,
              "fieldsAlignment" : "column",
              "groupTitle" : "${entityName}",
              "fieldsInRow" : 2
            },
            "title" : "New Update Multiple Attributes",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "enableDataExport" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "showTitleIcon" : false,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "f8da9b7f-ddb8-3d78-2ccf-77a8a237e6a2"
        },
        "6be1f20a-10c4-7790-e8ba-9e9dff81002d" : {
          "isSystemType" : true,
          "bundleAlias" : "rds_widget_collection",
          "typeAlias" : "update_multiple_attributes",
          "type" : "latest",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "85aa3338-c76f-84e9-5f65-058cea332757",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "displayConstructionSite",
                "type" : "attribute",
                "label" : "displayConstructionSite",
                "color" : "#2196f3",
                "settings" : {
                  "dataKeyHidden" : false,
                  "dataKeyType" : "server",
                  "dataKeyValueType" : "select",
                  "required" : false,
                  "isEditable" : "editable",
                  "selectOptions" : [ {
                    "value" : "all",
                    "label" : "Todas"
                  }, {
                    "value" : "obra 1",
                    "label" : "Obra 1"
                  } ],
                  "useCustomIcon" : false,
                  "useGetValueFunction" : true,
                  "getValueFunctionBody" : "return value",
                  "useSetValueFunction" : true,
                  "setValueFunctionBody" : "return value"
                },
                "_hash" : 0.44967691035128743,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1722362504287,
                  "endTimeMs" : 1722448904287
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : true,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "groupTitle" : "${entityName}",
              "showActionButtons" : true,
              "fieldsAlignment" : "row",
              "fieldsInRow" : 2
            },
            "title" : "New Update Multiple Attributes",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "enableDataExport" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { }
          },
          "row" : 0,
          "col" : 0,
          "id" : "6be1f20a-10c4-7790-e8ba-9e9dff81002d"
        }
      },
      "states" : {
        "default" : {
          "name" : "Reporte de uso",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "2455b3d4-55e6-bbc1-eae9-064c85bb3d91" : {
                  "sizeX" : 50,
                  "sizeY" : 32,
                  "row" : 0,
                  "col" : 14
                },
                "f8da9b7f-ddb8-3d78-2ccf-77a8a237e6a2" : {
                  "sizeX" : 14,
                  "sizeY" : 11,
                  "row" : 0,
                  "col" : 0
                },
                "6be1f20a-10c4-7790-e8ba-9e9dff81002d" : {
                  "sizeX" : 14,
                  "sizeY" : 8,
                  "row" : 11,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 64,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : false,
                "backgroundImageUrl" : null,
                "mobileAutoFillHeight" : false,
                "mobileRowHeight" : 70
              }
            }
          }
        }
      },
      "entityAliases" : {
        "8001d606-82a2-3779-3736-ee25ab28a44e" : {
          "id" : "8001d606-82a2-3779-3736-ee25ab28a44e",
          "alias" : "Todos",
          "filter" : {
            "type" : "entityType",
            "resolveMultiple" : false,
            "entityType" : "DEVICE"
          }
        },
        "413e8c5a-0f77-96be-e0bd-837ad9f542be" : {
          "id" : "413e8c5a-0f77-96be-e0bd-837ad9f542be",
          "alias" : "Devices",
          "filter" : {
            "type" : "entityType",
            "resolveMultiple" : true,
            "entityType" : "DEVICE"
          }
        },
        "85aa3338-c76f-84e9-5f65-058cea332757" : {
          "id" : "85aa3338-c76f-84e9-5f65-058cea332757",
          "alias" : "User",
          "filter" : {
            "type" : "singleEntity",
            "resolveMultiple" : false,
            "singleEntity" : {
              "entityType" : "CURRENT_USER",
              "id" : "13814000-1dd2-11b2-8080-808080808080"
            }
          }
        },
        "135ff87b-a23e-1244-dc29-961801c02ee7" : {
          "id" : "135ff87b-a23e-1244-dc29-961801c02ee7",
          "alias" : "Flotas",
          "filter" : {
            "type" : "assetSearchQuery",
            "resolveMultiple" : true,
            "rootStateEntity" : false,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null,
            "rootEntity" : {
              "entityType" : "CURRENT_TENANT",
              "id" : null
            },
            "direction" : "FROM",
            "maxLevel" : 8,
            "fetchLastLevelOnly" : false,
            "relationType" : "Contains",
            "assetTypes" : [ "default", "fleet-root" ]
          }
        }
      },
      "filters" : {
        "3a43ecc0-b83b-3486-fec4-194adaefd694" : {
          "id" : "3a43ecc0-b83b-3486-fec4-194adaefd694",
          "filter" : "Table Filter",
          "keyFilters" : [ {
            "key" : {
              "type" : "ATTRIBUTE",
              "key" : "constructionSite"
            },
            "valueType" : "STRING",
            "predicates" : [ {
              "keyFilterPredicate" : {
                "operation" : "IN",
                "value" : {
                  "defaultValue" : "",
                  "dynamicValue" : {
                    "sourceType" : "CURRENT_USER",
                    "sourceAttribute" : "displayConstructionSite",
                    "inherit" : false
                  }
                },
                "ignoreCase" : false,
                "type" : "STRING"
              },
              "userInfo" : {
                "editable" : true,
                "label" : "",
                "autogeneratedLabel" : true,
                "order" : 0
              }
            } ]
          } ],
          "editable" : false
        }
      },
      "timewindow" : {
        "hideInterval" : false,
        "hideLastInterval" : false,
        "hideQuickInterval" : false,
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 1,
        "history" : {
          "historyType" : 0,
          "timewindowMs" : 2592000000,
          "interval" : 500000,
          "fixedTimewindow" : {
            "startTimeMs" : 1.715178074665825E12,
            "endTimeMs" : 1.7151815800349941E12
          },
          "quickInterval" : "CURRENT_DAY"
        },
        "aggregation" : {
          "type" : "NONE",
          "limit" : 25000
        },
        "timezone" : null
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : true,
        "showEntitiesSelect" : true,
        "showDashboardTimewindow" : true,
        "showDashboardExport" : true,
        "toolbarAlwaysOpen" : true
      }
    },
    "customerId" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "a00cbdd0-19fb-11ef-832d-975fea959a44"
    },
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "name" : "Reporte de uso",
    "ownerId" : null,
    "title" : "Reporte de uso"
  },
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}